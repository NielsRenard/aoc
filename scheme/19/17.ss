(load "~/code/aoc/load.ss")
(advent-year 19)
(advent-day 17)

(define program
  (parse-advent comma-separated))

(define (on? x)
  (char=? x #\#))

(define (gref xs i j)
  (string-ref (list-ref xs i) j))

(define (grid->hashtable grid)
  (define m (length grid))
  (define n (string-length (car grid)))
  (define T (make-eqv-hashtable))
  (do ((i 0 (1+ i)))
      ((= i m) T)
    (do ((j 0 (1+ j)))
        ((= j n))
      (let ((x (gref grid i j)))
        (cond
         ((eqv? x #\^) (hashtable-set! T (+ i (* 0+1i j)) 'start))
         ((eqv? x #\#) (hashtable-set! T (+ i (* 0+1i j)) 'block)))))))

(define (solveA)
  (define m (intcode program))
  (run-until-halt m)
  (let* ((g (read-output m))
         (s (string-tokenize (list->string (map integer->char g))))
         (h (length s))
         (w (string-length (car s)))
         (xs '()))
    (do ((i 1 (1+ i)))
        ((= i (1- h)))
      (do ((j 1 (1+ j)))
          ((= j (1- w)))
        (when (and (on? (gref s i j))
                   (on? (gref s (1- i) j))
                   (on? (gref s (1+ i) j))
                   (on? (gref s i (1+ j)))
                   (on? (gref s i (1- j))))
          (push! (* i j) xs))))
    (for-each display-ln s)
    (apply + xs)))

(define (solve)
  (define grid-string
    ((compose reverse cdr reverse string-tokenize)
     (with-output-to-string solveA)))
  grid-string)

(define (solveB)
  (define m (intcode program))
  (define (send-command m s)
    (send-input* m `(,@(map char->integer (string->list s))
                     ,(char->integer #\newline))))
  (define plan "A,B,A,B,C,B,C,A,C,C")
  (define A "R,12,L,10,L,10")
  (define B "L,6,L,12,R,12,L,4")
  (define C "L,12,R,12,L,6")
  (define vid? "n")
  (store! m 0 2)
  (send-command m plan)
  (send-command m A)
  (send-command m B)
  (send-command m C)
  (send-command m vid?)
  (run-until-halt m)
  (get-output m))
