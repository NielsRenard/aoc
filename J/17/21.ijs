load '~/code/aoc/aoc.ijs'
require 'tables/dsv'

input =: 0 2 {"1 ([: <;._1 ' '&,);._2 aoc 2017;21

clean =: {~ ([: I. 2 > '#.'&i.)
rules =: (=&'#' @ clean) &.> input

r2 =: rules #~ 4={."1 # & > rules
r3 =: rules #~ 9={."1 # & > rules

NB. rho for rhotate, phi for phlip
rho2 =: 1 3 0 2 [ phi2 =: 1 0 3 2 [ rho3 =: 1 2 5 0 4 8 3 6 7 [ phi3 =: 2 1 0 5 4 3 8 7 6

NB. there's no doubt a better way to do this, but good is the enemy of ok.
NB. see math roots j lab slide 14 for subgroup generation (aka better way)
SG=: 1 : '~.@(, ,/@(x/~))^:_'   NB. subgroup
p=: (1|.i.5),: (<0 1) C. i.5
NB.    $ {"1 SG p     NB. subgroup generated by the two permutations

rhos2 =: (rho2&C.^:0)`(rho2&C.^:1)`(rho2&C.^:2)
rhos3 =: (rho3&C.^:0)`(rho3&C.^:2)`(rho3&C.^:4)`(rho3&C.^:6)
keys2 =: [: ~. [: (, phi2&C."1) rhos2`:0
keys3 =: [: ~. [: (, phi3&C."1) rhos3`:0

exp2 =: 1&{:: ;~ ([: keys2 0&{::)
exp3 =: 1&{:: ;~ ([: keys3 0&{::)

rules2 =: exp2"1 r2
rules3 =: exp3"1 r3

match =: 0 1 {:: ] {~ [: I. (e. 0&{::)"1
match2 =: 3 3 $ match&rules2
match3 =: 4 4 $ match&rules3

start=:3 3 $ 0 1 0 0 0 1 1 1 1

NB. focus on (n/x)*(n/x)*x*x squares
focus=: [: |:"_2 [ ]\"_1 [: |:"_1 [\
iter2=: [: unfocus [: (match2@,"_2) _2 focus ]
iter3=: [: unfocus [: (match3@,"_2) _3 focus ]
unfocus=: [: ,/ ,./"_1
iter=: iter2`iter3@.(2|#)
