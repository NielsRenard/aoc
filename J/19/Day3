# -*- mode: org -*-

* [[https://adventofcode.com/2019/day/3][Day 3: Crossed Wires]]

** Parsing

  Again with the org timeout issues... Solution takes around ~0.2s~
  from jconsole. Anyway, to parse we take the first char to get the
  direction as a complex number, multiplying it by the magnitude of
  the move indicated in the rest of the string.

#+begin_src j :session :exports code :tangle 3.ijs
require 'tables/csv'

parse =: makenum@:}.*{&0j1 1 0j_1 _1@:('URDL'&i.)@:{.
input=: parse &.> readcsv '../../input/19/3.in'
#+end_src

#+RESULTS:

** Moving  

  We trace the turns by summing cumutavely with ~+/\~. The segment
  between turns ~x,y~ is filled by calculating
  ~x+(y-x)%|y-x|i.|y-x|~. There's currently a lot of awkward boxing
  gymnastic to avoid having the list filled by shape...

#+BEGIN_SRC j :session :exports code :tangle 3.ijs
steps =: [ + ((%|) * 1+i.@|) @: -~
unwind =: [: steps/&.> 2 <\ ]
wires =: ,. ,; &.> <"1 unwind"1 ,. ([: +/\ 0&, @: >)"1 input
#+END_SRC

#+RESULTS:

** Solving
  
  The last step is answering the questions how many intersections, and
  when is earliest intersection? To do this, we employ sparse
  arrays. The shape will be given by the bounding box of the two
  wires. The two paths will be intersected by adding times if both
  entries are nonzero.

#+begin_src j :session :exports both :sit 1
wireA =: +.,;>0{::wires
wireB =: +.,;>1{::wires

NB. arr =: 1 $.(([: >: >./ - <./) wireA,wireB);0 1;0
mk =: 1 $. (0 1;0) ;~ [: ([: >: >./ - <./) ,
arr =: wireA mk wireB

NB. sum x+y if both nonzero or 0
I =: ([: * [) * + * [: * ]
X =: ((1+i.#wireA) ((<"1 wireA)}) arr) I (1+i.#wireB) ((<"1 wireB)}) arr
(7$.X) ; (<./ 5$.X)
#+end_src

#+RESULTS:
: ┌──┬────┐
: │21│5672│
: └──┴────┘
